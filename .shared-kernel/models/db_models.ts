import { DateAndTime, IDType }             from '../application.types'
import { EVENT_COMMANDS_AND_QUERIES_TYPE } from '../domain/commands-and-queries/cqrs.types'
import { PricingPlanValues }               from '../policies/pricing.policy'




export const RoleValue = Object.freeze({
  NOT_LOGGED_IN : 'NOT_LOGGED_IN',
  USER_LEVEL_1  : 'USER_LEVEL_1',
  ACCOUNT_HOLDER: 'ACCOUNT_HOLDER',
  MASTER_ADMIN  : 'MASTER_ADMIN'
} as const)
export type Role = keyof typeof RoleValue



export const PaymentStatusValue = Object.freeze({
  UNPAID             : 'UNPAID',
  PAID               : 'PAID',
  PAYMENT_IN_PROGRESS: 'PAYMENT_IN_PROGRESS',
  REJECTED           : 'REJECTED'
} as const)
export type PaymentStatus = keyof typeof PaymentStatusValue


export const AccountStatusValue = Object.freeze({
  ACTIVE              : 'ACTIVE',
  NOT_ACTIVE          : 'NOT_ACTIVE',
  EXPIRING_IN_PROGRESS: 'EXPIRING_IN_PROGRESS',
  EXPIRED             : 'EXPIRED'
} as const)
export type AccountStatus = keyof typeof AccountStatusValue



export const ALL_LOGGED_ROLES_COLLECTION: Role[] = [ RoleValue.USER_LEVEL_1,
                                                     RoleValue.ACCOUNT_HOLDER,
                                                     RoleValue.MASTER_ADMIN ]


type DateAndTimePartial = {
  created_at: DateAndTime
}


type UserMetadataPartial = {
  client_ip: string | null
  location: string | null
  language: string | null
  user_agent: string | null
}


export type Admin = {
  id: IDType
  notes: string
} & DateAndTimePartial


export const EventLogTypeValue = Object.freeze({
  ACCOUNT_EVENT_LOG: 'ACCOUNT_EVENT_LOG',
  LOGIN_EVENT_LOG  : 'LOGIN_EVENT_LOG'
} as const)
export type EventLogType = keyof typeof EventLogTypeValue




export type EventLog = {
  id: IDType
  created_by_user_id: IDType
  event: string
  event_type: EventLogType
  event_payload: string | null
} & UserMetadataPartial & DateAndTimePartial


export type EventLogWithoutAutogenerated = Omit<EventLog, 'id' | 'created_at'>


export type Account = {
  id: IDType
  created_by_user_id: IDType
  display_name: string | null
  pricing_plan: PricingPlanValues | null
  payment_status: PaymentStatus
  upcoming_payment_date: DateAndTime | null
  account_status: AccountStatus
  account_expiration_date: DateAndTime | null

} & DateAndTimePartial




export const SessionModeValue = Object.freeze({
  STANDARD    : 'STANDARD',
  PRESENTATION: 'PRESENTATION',
  BECOME_USER : 'BECOME_USER'
} as const)
export type SessionMode = keyof typeof SessionModeValue




export type Session = {
  session_id: string
  created_by_user_id: IDType
  session_mode: SessionMode
  last_used: DateAndTime | null
  expires_at: DateAndTime
} & DateAndTimePartial & UserMetadataPartial


export type DeletedUser = {
  user_id: IDType
  body: string

} & DateAndTimePartial

export type User = {
  user_id: IDType
  email: string
  display_name: string
  password: string
  role: Role
  permissions: EVENT_COMMANDS_AND_QUERIES_TYPE[]
  is_active: boolean

} & DateAndTimePartial


export type UserNoSensitive = Omit<User, 'password'>

export type UserRelationsAll = {
  sessions: Session[]
  account: Account
  event_logs: EventLog[]
}
